library(tidyverse)
library(dplyr)
collapsed_0223 <- run_0223 %>%
select(-c("X", "X.1")) %>%
group_by(n_bar, alpha, type, p, scale) %>%
summarize(across(.cols = -c(n_bar, alpha, type, p, scale),
~ mean(.x, na.rm = TRUE)),
across(reps, sum)) %>%
ungroup()
library(tidyverse)
library(dplyr)
collapsed_0223 <- run_0223 %>%
select(-c("X", "X.1")) %>%
group_by(n_bar, alpha, type, p, scale) %>%
summarize(across(.cols = -c(reps),
~ mean(.x, na.rm = TRUE)),
across(reps, sum)) %>%
ungroup()
collapsed_0223
library(tidyverse)
library(dplyr)
collapsed_0223 <- run_0223 %>%
select(-c("X", "X.1")) %>%
group_by(n_bar, alpha, type, p, scale) %>%
summarize(across(.cols = -c(reps, seed),
~ mean(.x, na.rm = TRUE)),
across(reps, sum)) %>%
ungroup()
collapsed_0223
library(tidyverse)
library(dplyr)
collapsed_0223 <- run_0223 %>%
select(-c("X", "X.1")) %>%
group_by(n_bar, alpha, type, p, scale) %>%
summarize(across(.cols = -c(reps, seed, chunkNo),
~ mean(.x, na.rm = TRUE)),
across(reps, sum)) %>%
ungroup()
library(tidyverse)
library(dplyr)
collapsed_0223 <- run_0223 %>%
select(-c("X", "X.1")) %>%
group_by(n_bar, alpha, type, p, scale) %>%
summarize(across(.cols = -c(reps, seed, chunkNo),
~ mean(.x, na.rm = TRUE)),
across(reps, sum)) %>%
ungroup()
view(collapsed_0223)
library(tidyverse)
library(dplyr)
collapsed_0202 <- run_0202 %>%
select(-c("X", "X.1")) %>%
group_by(n_bar, alpha, type, p, scale) %>%
summarize(across(.cols = -c(reps, seed, chunkNo),
~ mean(.x, na.rm = TRUE)),
across(reps, sum)) %>%
ungroup()
run_0202 <- read.csv('/Users/thupham/Desktop/thesis/results/020223_run.csv')
library(tidyverse)
library(dplyr)
collapsed_0202 <- run_0202 %>%
select(-c("X", "X.1")) %>%
group_by(n_bar, alpha, type, p, scale) %>%
summarize(across(.cols = -c(reps, seed, chunkNo),
~ mean(.x, na.rm = TRUE)),
across(reps, sum)) %>%
ungroup()
view(collapsed_0202)
knitr::opts_chunk$set(echo = TRUE)
concat_files <- function(pathname) {
setwd(pathname)
for (data in list.files()){
# Create the first data if no data exist yet
if (!exists("dataset")){
dataset <- read.csv(data, header=TRUE)
}
# if data already exist, then append it together
if (exists("dataset")){
tempory <-read.csv(data, header=TRUE)
dataset <-unique(rbind(dataset, tempory))
rm(tempory)
}
}
return(dataset)
}
pathname <- "/Users/thupham/Desktop/thesis/021323_run"
concat_files(pathname)
pathname
write.csv(concat_files(pathname), "/Users/thupham/Desktop/thesis/021323_run_concat.csv")
run_0213 <- read.csv('/Users/thupham/Desktop/thesis/021323_run_concat.csv')
colnames(run_0213)
# will need to resolve inevitable merge conflicts
library(tidyverse)
library(dplyr)
collapsed_0213 <- run_0213 %>%
select(-c("X", "X.1")) %>%
group_by(n_bar:sigma_noise) %>%
summarize(across(.cols = -c(reps, seed, chunkNo),
~ mean(.x, na.rm = TRUE)),
across(reps, sum)) %>%
ungroup()
# will need to resolve inevitable merge conflicts
library(tidyverse)
library(dplyr)
collapsed_0213 <- run_0213 %>%
select(-c("X", "X.1")) %>%
group_by(across(n_bar:sigma_noise)) %>%
summarize(across(.cols = -c(reps, seed, chunkNo),
~ mean(.x, na.rm = TRUE)),
across(reps, sum)) %>%
ungroup()
view(collapsed_0213)
library(ggplot2)
ggplot(data = collapsed_0213, mapping = aes(x = snr, y = mean_agreement,
color = factor(type)))
collapsed_0213$mean_agreement
library(ggplot2)
ggplot(data = collapsed_0213, mapping = aes(x = snr, y = mean_agreement,
color = factor(type))) +
geom_point() +
geom_line()
library(ggplot2)
ggplot(data = collapsed_0213, mapping = aes(x = snr, y = mean_agreement,
color = factor(type))) +
geom_point() +
geom_line() +
labs(title="Mean Agreement vs. SNR",x="Signal to Noise Ratio",
y = "Mean Agreement")
colnames(collapsed_0213)
ggplot(data = collapsed_0213, mapping = aes(x = snr, y = mean_f1_mixed,
color = factor(type))) +
geom_point() +
geom_line() +
labs(title="Mean Agreement vs. SNR",x="Signal to Noise Ratio",
y = "Mean Agreement")
ggplot(data = collapsed_0213, mapping = aes(x = snr, y = mean_F1_mixed,
color = factor(type))) +
geom_point() +
geom_line() +
labs(title="Mean Agreement vs. SNR",x="Signal to Noise Ratio",
y = "Mean Agreement")
ggplot(data = collapsed_0213, mapping = aes(x = snr, y = mean_F1_fixed,
color = factor(type))) +
geom_point() +
geom_line() +
labs(title="Mean Agreement vs. SNR",x="Signal to Noise Ratio",
y = "Mean Agreement")
ggplot(data = collapsed_0213, mapping = aes(x = snr, y = mean_F1_mixed,
color = factor(type))) +
geom_point() +
geom_line() +
labs(title="Mean Agreement vs. SNR",x="Signal to Noise Ratio",
y = "Mean Agreement")
ggplot(data = collapsed_0213, mapping = aes(x = snr, y = mean_F1_mixed,
color = factor(type))) +
geom_point() +
geom_line() +
labs(title="F1 Score for Mixed LASSO vs. SNR",x="Signal to Noise Ratio",
y = "Mean F1 Score")
?pivot_longer()
collapsed_0213_1 <- collapsed_0213_1 %>%
filter(type == 1) %>%
select(mean_F1_mixed, mean_F1_fixed) %>%
pivot_longer(cols = c(mean_F1_mixed, mean_F1_fixed),
names_to = "effects",
values_to = "F1")
collapsed_0213_1 <- collapsed_0213 %>%
filter(type == 1) %>%
select(mean_F1_mixed, mean_F1_fixed) %>%
pivot_longer(cols = c(mean_F1_mixed, mean_F1_fixed),
names_to = "effects",
values_to = "F1")
collapsed_0213_1
collapsed_0213_1 <- collapsed_0213 %>%
filter(type == 1) %>%
select(mean_F1_mixed, mean_F1_fixed) %>%
pivot_longer(cols = c(snr, mean_F1_mixed, mean_F1_fixed),
names_to = "effects",
values_to = "F1")
collapsed_0213_1 <- collapsed_0213 %>%
filter(type == 1) %>%
select(mean_F1_mixed, mean_F1_fixed, snr) %>%
pivot_longer(cols = c(mean_F1_mixed, mean_F1_fixed),
names_to = "effects",
values_to = "F1")
ggplot(data = collapsed_0213_1, mapping = aes(x = snr, y = F1,
color = factor(effects))) +
geom_point() +
geom_line() +
labs(title="F1 Score for Mixed LASSO vs. SNR", x="Signal to Noise Ratio",
y = "Mean F1 Score")
collapsed_0213_2 <- collapsed_0213 %>%
filter(type == 2) %>%
select(mean_F1_mixed, mean_F1_fixed, snr) %>%
pivot_longer(cols = c(mean_F1_mixed, mean_F1_fixed),
names_to = "effects",
values_to = "F1")
collapsed_0213_3 <- collapsed_0213 %>%
filter(type == 3) %>%
select(mean_F1_mixed, mean_F1_fixed, snr) %>%
pivot_longer(cols = c(mean_F1_mixed, mean_F1_fixed),
names_to = "effects",
values_to = "F1")
collapsed_0213_4 <- collapsed_0213 %>%
filter(type == 4) %>%
select(mean_F1_mixed, mean_F1_fixed, snr) %>%
pivot_longer(cols = c(mean_F1_mixed, mean_F1_fixed),
names_to = "effects",
values_to = "F1")
collapsed_0213_5 <- collapsed_0213 %>%
filter(type == 5) %>%
select(mean_F1_mixed, mean_F1_fixed, snr) %>%
pivot_longer(cols = c(mean_F1_mixed, mean_F1_fixed),
names_to = "effects",
values_to = "F1")
ggplot(data = collapsed_0213_2, mapping = aes(x = snr, y = F1,
color = factor(effects))) +
geom_point() +
geom_line() +
labs(title="F1 Score for Mixed LASSO vs. SNR, Type 1",
x="Signal to Noise Ratio",
y = "Mean F1 Score")
ggplot(data = collapsed_0213_3, mapping = aes(x = snr, y = F1,
color = factor(effects))) +
geom_point() +
geom_line() +
labs(title="F1 Score for Mixed LASSO vs. SNR, Type 1",
x="Signal to Noise Ratio",
y = "Mean F1 Score")
ggplot(data = collapsed_0213_4, mapping = aes(x = snr, y = F1,
color = factor(effects))) +
geom_point() +
geom_line() +
labs(title="F1 Score for Mixed LASSO vs. SNR, Type 1",
x="Signal to Noise Ratio",
y = "Mean F1 Score")
ggplot(data = collapsed_0213_5, mapping = aes(x = snr, y = F1,
color = factor(effects))) +
geom_point() +
geom_line() +
labs(title="F1 Score for Mixed LASSO vs. SNR, Type 1",
x="Signal to Noise Ratio",
y = "Mean F1 Score")
collapsed_0213
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Put all necessary libraries here
# We got you started!
library(tidyverse)
library(viridis)
install.packages('viridis')
install.packages('lubridate')
install.packages("lubridate")
# Put all necessary libraries here
# We got you started!
library(tidyverse)
library(viridis)
library(lubridate)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Read in the data
crash_data <- read_csv("https://raw.githubusercontent.com/harvard-stat108s23/materials/main/psets/data/cambridge_cyclist_ped_crash.csv")
ggplot(data = crash_data , aes(x = lon, y = lat)) +
geom_point(alpha = .4)
library(ggmap)
install.packages('ggmap')
library(ggmap)
cam_box <- c(bottom = 42.355, left = -71.15,
top = 42.40, right = -71.07)
cam <- get_stamenmap(cam_box,
maptype = "toner-lite",
zoom = 12)
cam %>%
ggmap() +
geom_point(alpha = .4, data = crash_data,
mapping = aes(x = lon, y = lat),
color = "deeppink")
?ggmap
library(ggimage)
install.packages('ggimage')
library(ggimage)
car_img <- "https://raw.githubusercontent.com/harvard-stat108s23/materials/main/img/car.png"
cam %>%
ggmap() +
geom_image(data = crash_data,
mapping = aes(x = lon, y = lat),
image = car_img, size = .02)  +
theme_void()
# Toy example of fct_relevel
toy_data <- data.frame(animal = factor(c("cat", "mouse", "dog")),
cuteness = c(100, -2, 76))
levels(toy_data$animal)
toy_data <- mutate(toy_data,
animal = fct_relevel(animal, "dog", "mouse", "cat"))
levels(toy_data$animal)
?fct_relevel
?str_subset
# GRADERS: Note: The students won't likely use str_subset.
hour_levels <- unique(crash_data$crash_hour) %>% sort()
crash_data <- mutate(crash_data,
crash_hour = fct_relevel(crash_hour,
c(str_subset(hour_levels, "AM"),
str_subset(hour_levels, "PM"))))
cam %>%
ggmap() +
geom_image(data = crash_data,
mapping = aes(x = lon, y = lat),
image = car_img, size = .08)  +
theme_void() +
facet_wrap(~crash_hour, ncol = 4)
library(gganimate)
library(png)
# Leave in the eval = FALSE when you knit to .pdf
library(gganimate)
p_an <- cam %>%
ggmap() +
geom_image(data = crash_data,
mapping = aes(x = lon, y = lat, group = crash_numb),
image = car_img, size = .08)  +
theme_void() +
transition_states(crash_hour, transition_length = 25, state_length = 20) +
#  exit_drift(y_mod = -.2) +
#enter_fly(x_loc = -71, y_loc = 42.36) +
#exit_fly(x_loc = -71, y_loc = 42.42) +
#exit_shrink() +
labs(subtitle = "Time of day: {closest_state}")
animate(p_an)
# Leave in the eval = FALSE when you knit!
library(gganimate)
cam %>%
ggmap() +
geom_image(data = crash_data,
mapping = aes(x = lon, y = lat, group = crash_numb),
image = car_img, size = .08)  +
theme_void() +
transition_states(crash_hour, transition_length = 10, state_length = 100) +
enter_fade() + enter_grow() +
enter_fly(y_loc = 0) +
exit_fly(y_loc = 100) +
exit_fade() + exit_shrink() +
labs(subtitle = "Time of day: {closest_state}")
library(plotly)
install.packages('plotly')
library(plotly)
p <- ggplot(data = crash_data , aes(x = lon, y = lat)) +
geom_point(alpha = .4)
ggplotly(p)
#toy example of fct_collapse
soft_serve <- data.frame(flavor = factor(c("vanilla", "chocolate",
"strawberry", "peach",
"earl grey", "matcha")))
levels(soft_serve$flavor)
soft_serve <- mutate(soft_serve,
flavor = fct_collapse(flavor,
"fruit" = c("strawberry", "peach"),
"tea" = c("earl grey", "matcha"),
other_level = "other"))
levels(soft_serve$flavor)
#use fct_collapse on ambnt_light_descr into Dark, Dawn, Daylight, Dusk
#using other_level = "NULL"
crash_data <- crash_data %>%
mutate(ambnt_light_descr = fct_collapse(
ambnt_light_descr,
dark = c("Dark - lighted roadway", "Dark - roadway not lighted",
"Dark - unknown roadway lighting"),
dawn = "Dawn",
daylight = "Daylight",
dusk = "Dusk",
other_level = "NULL"))
#checking that sums are reasonable
crash_data %>% count(ambnt_light_descr)
crash_data %>%
filter(ambnt_light_descr %in% c("daylight", "dark")) %>%
ggplot(aes(x = lon, y = lat, col = ambnt_light_descr)) +
geom_point(alpha = 0.40) +
scale_color_manual(values = c("midnightblue", "skyblue"))
#figure out what types of collisions tend to result in injury
#consider only the categories of injury (fatal and non-fatal) vs property damage
#let's clean up collision description...
crash_data <- crash_data %>%
mutate(manr_coll_descr = fct_collapse(
manr_coll_descr,
'angle' = "Angle",
'head-on' = "Head-on",
'rear-end' = "Rear-end",
'sideswipe' = c("Sideswipe, opposite direction", "Sideswipe, same direction"),
'single_vehicle' = "Single vehicle crash",
other_level = "other/unknown"
))
crash_data %>%
filter(crash_severity_descr %in% c("Fatal injury", "Non-fatal injury",
"Property damage only (none injured)")) %>%
mutate(crash_severity_descr = fct_collapse(
crash_severity_descr,
'injury' = c("Fatal injury", "Non-fatal injury"),
'none injured' = "Property damage only (none injured)"
)) %>%
filter(manr_coll_descr != "other/unknown") %>%
ggplot(aes(fill = crash_severity_descr, x = manr_coll_descr)) +
geom_bar(position = "fill")
#create wrangled dataframe
tab <- crash_data %>%
filter(year == 2022, ambnt_light_descr == "dark") %>%
select(crash_hour, manr_coll_descr, max_injr_svrty_cl, speed_limit) %>%
arrange(desc(speed_limit))
tab
#count up number for injury status descriptions
tab %>% count(max_injr_svrty_cl)
# Read in the data
crash_data <- read_csv("https://raw.githubusercontent.com/harvard-stat108s23/materials/main/psets/data/cambridge_cyclist_ped_crash.csv")
monthly_counts <- crash_data
monthly_counts$year <- factor(monthly_counts$year)
christina <- subset(monthly_counts,  month=="Dec")
crash_data <- mutate(crash_data,
month = month(mdy(crash_date), label = TRUE)) %>%
filter(year %in% 2019:2021)
monthly_counts <- count(crash_data, month, year)
monthly_counts$year <- factor(monthly_counts$year)
christina <- subset(monthly_counts,  month=="Dec")
c_animate <- ggplot(data = monthly_counts, mapping = aes(x= month, y = n, color = year)) +
geom_line(mapping =aes(group = year)) +
geom_text_repel(data = christina, mapping = aes(label = year))+
theme(legend.position = "none") +
labs(title = "Monthly crashes for years 2019-2021", x = "Month", y = "Crash count")+
transition_reveal(as.numeric(month))
library(ggrepel)
install.packages('ggrepel')
library(ggrepel)
monthly_counts$year <- factor(monthly_counts$year)
christina <- subset(monthly_counts,  month=="Dec")
c_animate <- ggplot(data = monthly_counts, mapping = aes(x= month, y = n, color = year)) +
geom_line(mapping =aes(group = year)) +
geom_text_repel(data = christina, mapping = aes(label = year))+
theme(legend.position = "none") +
labs(title = "Monthly crashes for years 2019-2021", x = "Month", y = "Crash count")+
transition_reveal(as.numeric(month))
animate(c_animate, detail = 10, fps = 10, nframes = 200, end_pause = 40, height = 4, width = 7, units = "in", res = 100)
colnames(monthly_counts)
library(ggrepel)
monthly_counts$year <- factor(monthly_counts$year)
christina <- subset(monthly_counts,  month=="Dec")
c_animate <- ggplot(data = monthly_counts, mapping = aes(x= month, y = n,
color = "year")) +
geom_line(mapping =aes(group = year)) +
geom_text_repel(data = christina, mapping = aes(label = year))+
theme(legend.position = "none") +
labs(title = "Monthly crashes for years 2019-2021", x = "Month", y = "Crash count")+
transition_reveal(as.numeric(month))
animate(c_animate, detail = 10, fps = 10, nframes = 200, end_pause = 40, height = 4, width = 7, units = "in", res = 100)
library(ggrepel)
monthly_counts$year <- factor(monthly_counts$year)
christina <- subset(monthly_counts,  month=="Dec")
c_animate <- ggplot(data = monthly_counts, mapping = aes(x= month, y = n,
color = year)) +
geom_line(mapping =aes(group = year)) +
geom_text_repel(data = christina, mapping = aes(label = year))+
theme(legend.position = "none") +
labs(title = "Monthly crashes for years 2019-2021", x = "Month", y = "Crash count")+
transition_reveal(as.numeric(month))
animate(c_animate, detail = 10, fps = 10, nframes = 200, end_pause = 40, height = 4, width = 7, units = "in", res = 100)
?animate()
library(ggrepel)
monthly_counts$year <- factor(monthly_counts$year)
christina <- subset(monthly_counts,  month=="Dec")
c_animate <- ggplot(data = monthly_counts, mapping = aes(x= month, y = n,
color = year)) +
geom_line(mapping =aes(group = year)) +
geom_text_repel(data = christina, mapping = aes(label = year))+
theme(legend.position = "none") +
labs(title = "Monthly crashes for years 2019-2021", x = "Month", y = "Crash count")+
transition_reveal(as.numeric(month))
animate(c_animate, detail = 10, fps = 10, nframes = 200, end_pause = 0, height = 4, width = 7, units = "in", res = 100)
c_animate
library(ggrepel)
monthly_counts$year <- factor(monthly_counts$year)
christina <- subset(monthly_counts,  month=="Dec")
c_animate <- ggplot(data = monthly_counts, mapping = aes(x= month, y = n,
color = year)) +
geom_line(mapping =aes(group = year)) +
geom_text_repel(data = christina, mapping = aes(label = year))+
theme(legend.position = "none") +
labs(title = "Monthly crashes for years 2019-2021", x = "Month", y = "Crash count") # +
# transition_reveal(as.numeric(month))
# animate(c_animate, detail = 10, fps = 10, nframes = 200, end_pause = 40, height = 4, width = 7, units = "in", res = 100)
c_animate
?gganimate
require(devtools)
require(devtools)
install_version("gganimate", version = "1.0.7",
repos = "http://cran.us.r-project.org")
packageVersion('gganimate')
library(ggrepel)
monthly_counts$year <- factor(monthly_counts$year)
christina <- subset(monthly_counts,  month=="Dec")
c_animate <- ggplot(data = monthly_counts, mapping = aes(x= month, y = n,
color = year)) +
geom_line(mapping =aes(group = year)) +
geom_text_repel(data = christina, mapping = aes(label = year))+
theme(legend.position = "none") +
labs(title = "Monthly crashes for years 2019-2021", x = "Month", y = "Crash count") +
transition_reveal(as.numeric(month))
animate(c_animate, detail = 10, fps = 10, nframes = 200, end_pause = 40, height = 4, width = 7, units = "in", res = 100)
library(ggrepel)
library(gganimate)
monthly_counts$year <- factor(monthly_counts$year)
christina <- subset(monthly_counts,  month=="Dec")
c_animate <- ggplot(data = monthly_counts, mapping = aes(x= month, y = n,
color = year)) +
geom_line(mapping =aes(group = year)) +
geom_text_repel(data = christina, mapping = aes(label = year))+
theme(legend.position = "none") +
labs(title = "Monthly crashes for years 2019-2021", x = "Month", y = "Crash count") +
transition_reveal(as.numeric(month))
animate(c_animate, detail = 10, fps = 10, nframes = 200, end_pause = 40, height = 4, width = 7, units = "in", res = 100)
